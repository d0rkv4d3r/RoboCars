using Microsoft.SPOT.Hardware;
using System;

namespace Hero_Simple_Application5
{
    public class Program
    {
        static ulong data_throttle;
        static uint length_throttle;

        static ulong data_brake;
        static uint length_brake;

        static ulong data_turn;
        static uint length_turn;

        static ulong data_reverse;
        static uint length_reverse;

        static ulong data_light;
        static uint length_light;

        static ulong data_camera;
        static uint length_camera;

        static int action;
        static string datastr;

        static readonly char Car = 'C';
        static readonly uint duration_straight = ChooseCar(Car);

        static readonly uint Throttle_ArbID = 0x2FA;
        static readonly uint Reverse_ArbID = 0x17D;
        static readonly uint Turn_ArbID = 0x2AA;
        static readonly uint Brake_ArbID = 0xBB0;
        static readonly uint Light_ArbID = 0x19B;
        static readonly uint Camera_ArbID = 0x1BB;

        public static void Main()
        {

            //define numeric variables
            uint period = 2000; //microseconds between pulses
            uint duration = duration_straight; //microsecond length of pulse
            const long kTimeoutPeriod = 1000 * TimeSpan.TicksPerMillisecond; //timeout throttle/reverse after 1000 milliseconds

            //declare car parts
            PWM pwm_7 = new PWM(CTRE.HERO.IO.Port3.PWM_Pin7, period, duration, PWM.ScaleFactor.Microseconds, false);
            CTRE.Phoenix.MotorControl.CAN.TalonSRX myTalon = new CTRE.Phoenix.MotorControl.CAN.TalonSRX(0);
            //controller if needed
            CTRE.Phoenix.Controller.GameController g = new CTRE.Phoenix.Controller.GameController(new CTRE.Phoenix.UsbHostDevice(0));

            pwm_7.Start();

            while (true)
            {
                //reset CAN input
                datastr = "";
                action = -1;

                //stop wheel spin after 1000ms (1 sec)
                if (CTRE.Native.CAN.Receive(Throttle_ArbID, ref data_throttle, ref length_throttle) != 0 && CTRE.Native.CAN.Receive(Reverse_ArbID, ref data_reverse, ref length_reverse) != 0)
                {
                    long lastEvent = 0;
                    while (true){
                        CTRE.Phoenix.Watchdog.Feed();
                        System.Threading.Thread.Sleep(10);
                        long now = DateTime.Now.Ticks;
                        if ((now - lastEvent) > kTimeoutPeriod)
                        {
                            myTalon.Set(CTRE.Phoenix.MotorControl.ControlMode.PercentOutput, 0.0);
                            break;
                        }
                    }
                }

                //turn straight after 1000ms (1 sec)
                if (CTRE.Native.CAN.Receive(Turn_ArbID, ref data_turn, ref length_turn) != 0)
                {
                    long lastEvent = 0;
                    while (true)
                    {
                        CTRE.Phoenix.Watchdog.Feed();
                        System.Threading.Thread.Sleep(10);
                        long now = DateTime.Now.Ticks;
                        if ((now - lastEvent) > kTimeoutPeriod)
                        {
                            pwm_7.Duration = duration_straight;
                            pwm_7.Start();
                            break;
                        }
                    }
                }

                //BRAKE
                //receive==0 means received in the last 255 milliseconds
                if (CTRE.Native.CAN.Receive(Brake_ArbID, ref data_brake, ref length_brake) == 0)
                { 
                    datastr = data_brake.ToString("X");
                    action = 0;
                }
                //FORWARD
                else if (CTRE.Native.CAN.Receive(Throttle_ArbID, ref data_throttle, ref length_throttle) == 0)
                {
                    datastr = data_throttle.ToString("X");
                    action = 1;
                }
                //REVERSE
                else if (CTRE.Native.CAN.Receive(Reverse_ArbID, ref data_reverse, ref length_reverse) == 0)
                {
                    datastr = data_reverse.ToString("X");
                    action = 2;
                }
                //TURN
                else if (CTRE.Native.CAN.Receive(Turn_ArbID, ref data_turn, ref length_turn) == 0)
                {
                    datastr = data_turn.ToString("X");
                    action = 3;
                }
                //LIGHT
                else if (CTRE.Native.CAN.Receive(Light_ArbID, ref data_light, ref length_light) == 0)
                {
                    datastr = data_light.ToString("X");
                    action = 4;
                }
                //CAMERA
                else if (CTRE.Native.CAN.Receive(Camera_ArbID, ref data_camera, ref length_camera) == 0)
                {
                    datastr = data_camera.ToString("X");
                    action = 5;
                }
                //USED IF GAMEPAD CONTROLLED
                else if (g.GetConnectionStatus() == CTRE.Phoenix.UsbDeviceConnection.Connected)
                {
                    myTalon.Set(CTRE.Phoenix.MotorControl.ControlMode.PercentOutput, -1*g.GetAxis(1));
                    pwm_7.Duration = duration_straight + (uint)(220 * -1 * g.GetAxis(0));
                    pwm_7.Start();
                }


                try
                {
                    if (datastr != "")
                    {
                        //BRAKE
                        if (action == 0 && datastr == "00")
                        {
                            //set speed to 0
                            myTalon.Set(CTRE.Phoenix.MotorControl.ControlMode.PercentOutput, 0.0);
                        }

                        //FORWARD
                        else if (action == 1)
                        {
                            //convert input hex to speed
                            double talon_per = DataToMotorPercent(datastr);
                            //max out speed at 30%
                            if (talon_per > .3) talon_per = .3;
                            //set the speed
                            myTalon.Set(CTRE.Phoenix.MotorControl.ControlMode.PercentOutput, talon_per);
                        }

                        //REVERSE
                        else if (action == 2)
                        {
                            //convert input hex to speed
                            double talon_per = DataToMotorPercent(datastr);
                            //max out speed at 15%
                            if (talon_per > .15) talon_per = .15;
                            //set the speed
                            myTalon.Set(CTRE.Phoenix.MotorControl.ControlMode.PercentOutput, -1* talon_per);
                        }

                        //TURN
                        else if (action==3)
                        {
                            double pwm_per;
                            string angle_hex;

                            if (datastr.Length == 4)
                            {
                                angle_hex = datastr.Substring(2,1) + datastr.Substring(3,1) + datastr.Substring(0,1) + datastr.Substring(1,1);
                            }
                            else if (datastr.Length == 2) angle_hex = datastr;
                            else continue;
                            int angle_dec = Convert.ToInt32(angle_hex, 16);

                            //turn left
                            if (angle_dec < 7200 && angle_dec >= 0)
                            {
                                pwm_per = (7200-(double)angle_dec)/7200;
                                uint new_duration = duration_straight + (uint)(300 * pwm_per);
                                pwm_7.Duration = new_duration;
                                pwm_7.Start();
                            }

                            //turn right
                            else
                            {
                                pwm_per = ((double)angle_dec-7200) / 7200;
                                uint new_duration = duration_straight + (uint)(300 * -1 * pwm_per);
                                pwm_7.Duration = new_duration;
                                pwm_7.Start();
                            }

                        }

                    }
                }

                catch { continue; }

                CTRE.Phoenix.Watchdog.Feed();
                System.Threading.Thread.Sleep(10);
            }
        }

        //convert hexidecimal string to throttle power percentage
        public static double DataToMotorPercent(string datastr)
        {
            string speed_hex = datastr;
            int speed_dec = Convert.ToInt32(speed_hex, 16);
            double talon_per = (double)speed_dec / 255;

            return talon_per;
        }


        //PWM steering threshold
        public static uint ChooseCar(char car)
        {
            if (car == 'A')
            {
                return 1450;
            }

            else if (car == 'B')
            {
                return 1530;
            }

            else if (car == 'C')
            {
                return 1530;
            }

            else if (car == 'D')
            {
                return 1530;
            }

            else if (car == 'E')
            {
                return 1530;
            }
            else return 0;
        }
    }
}
